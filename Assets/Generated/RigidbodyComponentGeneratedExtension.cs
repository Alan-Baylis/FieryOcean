//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public RigidbodyComponent rigidbody { get { return (RigidbodyComponent)GetComponent(CoreComponentIds.Rigidbody); } }
        public bool hasRigidbody { get { return HasComponent(CoreComponentIds.Rigidbody); } }

        public Entity AddRigidbody(UnityEngine.Rigidbody newRigidbody) {
            var component = CreateComponent<RigidbodyComponent>(CoreComponentIds.Rigidbody);
            component.rigidbody = newRigidbody;
            return AddComponent(CoreComponentIds.Rigidbody, component);
        }

        public Entity ReplaceRigidbody(UnityEngine.Rigidbody newRigidbody) {
            var component = CreateComponent<RigidbodyComponent>(CoreComponentIds.Rigidbody);
            component.rigidbody = newRigidbody;
            ReplaceComponent(CoreComponentIds.Rigidbody, component);
            return this;
        }

        public Entity RemoveRigidbody() {
            return RemoveComponent(CoreComponentIds.Rigidbody);
        }
    }
}

    public partial class CoreMatcher {

        static IMatcher _matcherRigidbody;

        public static IMatcher Rigidbody {
            get {
                if(_matcherRigidbody == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.Rigidbody);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherRigidbody = matcher;
                }

                return _matcherRigidbody;
            }
        }
    }

    public partial class InputMatcher {

        static IMatcher _matcherRigidbody;

        public static IMatcher Rigidbody {
            get {
                if(_matcherRigidbody == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Rigidbody);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherRigidbody = matcher;
                }

                return _matcherRigidbody;
            }
        }
    }
